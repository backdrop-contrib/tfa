<?php

/**
 * @file
 * Install and update hooks.
 */

/**
 * Implements hook_requirements().
 */
function tfa_requirements($phase) {
  $t = get_t();
  if ($phase == 'runtime') {
    if (!extension_loaded('openssl')) {
      if (extension_loaded('mcrypt')) {
        $requirement_severity = REQUIREMENT_WARNING;
        $description = $t('The TFA module recommends the PHP OpenSSL extension to be installed on the web server.');
      }
      else {
        $requirement_severity = REQUIREMENT_ERROR;
        $description = $t('The TFA module requires either the PHP OpenSSL or Mcrypt extensions to be installed on the web server.');
      }
    }
    else {
      $requirement_severity = REQUIREMENT_OK;
      $description = '';
    }

    $enabled = config_get('tfa.settings', 'tfa_enabled');
    $msg = $enabled ? 'Enabled' : 'Not enabled';

    $requirements = array(
      array(
        'title' => $t('Two-factor authentication'),
        'value' => $t($msg),
        'description' => $description,
        'severity' => $requirement_severity,
      ),
    );

    return $requirements;
  }
  return array();
}

/**
 * Move TFA settings from variables to config.
 */
function tfa_update_1000() {
  // Migrate variables to config.
  $config = config('tfa.settings');
  $config->set('tfa_login_plugins', update_variable_get('tfa_login_plugins', array()));
  $config->set('tfa_validate_plugin', update_variable_get('tfa_validate_plugin', ''));
  $config->set('tfa_fallback_plugins', update_variable_get('tfa_fallback_plugins', array()));
  $config->set('tfa_begin_threshold', update_variable_get('tfa_begin_threshold', 6));
  $config->set('tfa_flood_window', update_variable_get('tfa_flood_window', 3600));
  $config->set('tfa_user_window', update_variable_get('tfa_user_window', 900));
  $config->set('tfa_user_threshold', update_variable_get('tfa_user_threshold', 6));
  $config->set('tfa_enabled', update_variable_get('tfa_enabled', 0));
  $config->set('tfa_test_mode', update_variable_get('tfa_test_mode', 0));
  $config->save();

  // Delete variables.
  update_variable_del('tfa_login_plugins');
  update_variable_del('tfa_validate_plugin');
  update_variable_del('tfa_fallback_plugins');
  update_variable_del('tfa_begin_threshold');
  update_variable_del('tfa_flood_window');
  update_variable_del('tfa_user_window');
  update_variable_del('tfa_user_threshold');
  update_variable_del('tfa_enabled');
  update_variable_del('tfa_test_mode');
  // This variable used to exist.
  update_variable_del('tfa_validate_threshold');
  update_variable_del('tfa_required');
}

/**
 * Fix tfa_fallback_plugins variable.
 */
function tfa_update_1001() {
  // Spelling mistake in previous update hook.
  // If the variable is still empty set it to include at least the
  // validate_plugin.
  $config = config('tfa.settings');
  $fallback_plugins = $config->get('tfa_fallback_plugins');
  $validate_plugin = $config->get('tfa_validate_plugin');
  if ($fallback_plugins !== NULL && !empty($fallback_plugins)) {
    return;
  }
  $config->set('tfa_fallback_plugins', array('-999' => $validate_plugin));
  $config->clear('tfa_fallback_plugin');
  $config->save();
}

/**
 * Move tfa_timeout from variable to config.
 */
function tfa_update_1002() {
  $config = config('tfa.settings');
  $config->set('tfa_timeout', update_variable_get('tfa_timeout', 300));
  $config->save();

  // Delete variables.
  update_variable_del('tfa_timeout');
}
